Парадигма программирования определяет общий стиль написания
программ. Она указывает, как выделяются отдельные элементы программы,
что они собой представляют, каким образом между собой взаимодействуют, и
так далее. По своей роли в проектировании и конструировании парадигма
играет примерно ту же роль, что модель жизненного цикла в планировании
процессов разработки программного обеспечения.
Выбор парадигмы программирования определяется архитектурой
программной системы. Выделяют два основных типа парадигм
программирования:
1. В декларативном программировании программа описывает цель,
но не средства ее достижения. Это позволяет сосредоточиться на
используемых алгоритмах (а не нюансах их реализации), поэтому
декларативное программирование достаточно популярно в науке.
2. В императивном программировании программа представляет
собой набор инструкций, которые изменяют состояние программы (то есть
значения определенных переменных). Поскольку имеющиеся на данный
момент компьютеры понимают инструкции, но не намерения, для написания
прикладных или, тем более, системных приложений используется именно
императивное программирование.
В пределах декларативного программирования можно выделить
функциональное программирование, в котором элементами программ
являются функции, и логическое программирование (элементы программ —
логические утверждения). Основные императивные парадигмы —
структурное, модульное и объектно-ориентированное программирование.
Различие между структурным программированием и ООП — в связи между
данными и поведением.
В структурном программировании связь слабая: данные хранятся в
структурах и обрабатываются с помощью процедур и функций, которые
реализуют поведение.
В ООП элементами программ являются объекты, которые объединяют
в себе как данные (поля объектов), так и поведение (методы).
Общие сведения о парадигмах программирования
За те пятьдесят с небольшим лет, которые существует дисциплина:
«программирование», - сменилось несколько поколений правил, концепций,
моды, взглядов на то, как надо «писать программы». Все эти правила,
концепции, взгляды, мода, наконец, позже назвали в информатике
«парадигмами программирования». Вот неполный список парадигм, вместе с
датами их появления:
1957г., процедурная парадигма, язык ФОРТРАН, создатель Бэкус;
1967г., функциональная парадигма, язык ЛИСП, создатель Маккарти;
1970г., структурированная парадигма, язык ПАСКАЛЬ, создатель
Вирт;
1974г., логическая парадигма, язык ПРОЛОГ;
1983г., объектно-ориентированная парадигма, пример - язык C++,
создатель Страуструп.
В конце списка представлены языки программирования и их создатели,
внесшие значительный вклад в популяризацию этих парадигм.
В процессе своего развития эти парадигмы «мутировали»,
«отпочковывались», «объединялись» (так, язык Си объединил в себе
процедурную и структурированную парадигму). В результате этих "мутаций"
по состоянию на 01.06.2008 года оформились следующие парадигмы
программирования:
Процедурная (или модульная) парадигма;
Логическая парадигма;
Объектно-ориентированная парадигма.
Эти три совершенно разные по подходу парадигмы составляют основу
современного программирования. Хотя в настоящее время наиболее "модной"
является объектно-ориентированная парадигма, остальные парадигмы также
используются на практике и изучаются в ВУЗах. Их мы и рассмотрим ниже.
Кроме деления языков программирования по парадигмам, существует
также деление языков на «императивные» и «декларативные».
Императивными называются такие языки программирования, в
которых описываются в основном «инструкции» по пошаговому выполнению
алгоритмов. Все внимание в них отводится лишь реализации этой
последовательности действий, а данным и их структуре отводится
второстепенная роль. Примером такого рода языков может служить языки
создания драйверов устройств: Assembler и C++. При использовании этих
языков мы не знаем, какие данные будет отправлять/получать устройство, но
зато мы знаем, какие действия нужно осуществить над данными.
Декларативными называются языки программирования, в которых
алгоритм работы с данными «зашит» в языке программирования, а сама
программа представляет собой данные, упорядоченные и структурированные
таким образом, что их легко обрабатывают «стандартные» алгоритмы вывода.
В декларативных языках как бы «нет разницы» между данными и алгоритмом,
их обрабатывающим. От «значения» данных, подаваемых на вход программы,
зависит дальнейшее направление расчетов. Примерами декларативных языков
могут служить языки: LISP и Prolog. И программа, и данные на языке ЛИСП
представляют собой «списки» вместе с функциями, выполняемыми над ними.
На языке ПРОЛОГ есть условное разделение программы на данные («факты»)
и код («правила», «продукции»). Но это разделение достаточно условно: и
факты, и правила имеют одну и ту же форму записи.
Декларативные языки лучше всего использовать в случаях, когда
«данные управляют программой»: при написании экспертных систем, при
конструировании трансляторов с языков программирования, для большинства
задач искусственного интеллекта. Именно там их использование приведет к
наибольшей эффективности.
Процедурная парадигма
Эта парадигма является самой «древней» и, одновременно, - самой
простой в реализации и обучении программирования. На основе этой
парадигмы изучаются языки программирования в школе. И поэтому, вполне
естественно, автор поставил ее на первое место.
История возникновения парадигмы
«Истоки» процедурной парадигмы программирования лежат в далеких
50-х годах прошлого века. После появления ЭВМ с архитектурой «фон
Неймана» появилась возможность компьютеру «самому», без участия
человека, проводить сложные вычисления. Эти годы и стали переломными в
становлении профессии «программист». Чтобы произвести сложные
вычисления, нужно сначала написать сложный алгоритм. Поскольку сложный
алгоритм трудно реализовать в ЭВМ так же, как на калькуляторе, появилась
необходимость в «записи» алгоритмов на более «понятном» человеку языке,
чем язык машинных кодов ЭВМ. Так, вначале появился язык ассемблера,
представляющий машинные коды в «удобочитаемом» виде.
В 1957 году Бэкус разработал первый язык высокого уровня:
ФОРТРАН. Эта аббревиатура переводится как: «FORmula TRANslator», -
переводчик формул. Как следует из его названия, его назначение - это
числовые вычисления. С помощью этого языка можно было «кодировать»
численные алгоритмы, не вдаваясь в архитектуру ЭВМ, количество регистров
в ее процессоре, особенности ее функционирования, и другие, «не важные»
для прикладного программиста вопросы. Вскоре, в начале 60-х годов
прошлого века, появился язык: «COBOL», - язык, предназначенный для
коммерческих вычислений. Аббревиатура «COBOL» расшифровывается как:
«COmmon Business Oriented Language» - «язык, ориентированный на общий
бизнес».
В реализации этих языков была предусмотрена (как и в ассемблере)
возможность «разбивки общего алгоритма» на несколько независимых
модулей: «процедур». «Нанизывая» процедуры в основном модуле
программы, как гирлянды на нитку, можно получить алгоритмы любой
сложности. В этом и состоит преимущество процедурного программирования.
Таким образом, возникла «процедурная парадигма», гласящая:
«Реализацию алгоритмов вычислений необходимо создавать с
помощью мелких, не зависимых друг от друга процедур, которые вызывают
друг друга в соответствии с логикой программы».
Эта парадигма проста не только в «написании» алгоритма, но и его
отладке: нужно убедиться в «работоспособности» каждого из модулей, что
намного проще, чем отладка всего алгоритма целиком.
Языки, поддерживающие парадигму
Среди языков, поддерживающих процедурную парадигму
программирования, используются следующие языки программирования:
1) Ассемблер;
2) Фортран;
3) Кобол;
4) Алгол;
5) PL 1;
6) Бейсик;
7) Си;
8) Паскаль;
9) Perl;
10) VB Script;
11) Jscript;
12) Multi Edit Macro Script;
13) MS-DOS Command Shell;
14) NDOS Shell;
15) Bash shell;
16) tc shell;
17) REXX;
18) язык SQL-запросов;
19) и др.
Все они поддерживают создание «модулей» - функций и подпрограмм,
которые разрабатываются и тестируются независимо, и осуществление
«вызовов» между ними.
Представление программ и реализация вычислений
Прежде, чем передать код программы на обработку компилятору,
программист должен соответствующим образом оформить код программы. В
этом разделе даются общие правила оформления кода программы на разных
языках программирования.
Способы записи алгоритмов. Блок-схемы
Изобразительных средств записи алгоритмов существует достаточно
много. Это связано с тем, что каждый исполнитель понимает лишь такой
алгоритм, который записан на понятном ему языке. Условно можно выделить
четыре способа записи алгоритмов:
 словесную форму (запись на естественном языке);
 формульно-словесную форму (запись с помощью ограниченного
набора синтаксических конструкций, на языке «псевдокод»);
 графическую форму (запись на языке блок-схем);
 программную форму (на языке исполнителя).
Словесная форма записи
При таком способе алгоритм записывается на естественном языке в
виде пронумерованных строк, соответствующих шагам его выполнения.
ЗАДАЧА. Написать алгоритм нахождения среднего арифметического
трех чисел.
Словесная форма записи алгоритма может быть следующей:
1-й шаг. Задать первое число.
2-й шаг. Задать второе число.
3-й шаг. Задать третье число.
4-й шаг. Сложить первое, второе и третье число.
5-й шаг. Разделить сумму на три.
6-й шаг. Вывести результат.
Словесная форма записи алгоритма многословна, любой естественный
язык допускает неоднозначность толкования отдельных предписаний и не
поддается строгой формализации. Следовательно, для формального
исполнителя такая запись алгоритма малопригодна. Однако это самый
простой способ, который не требует каких-либо дополнительных знаний,
кроме знания естественного языка.
Формульно-словесная форма записи
Этот способ записи алгоритма использует лишь некоторый
ограниченный набор типовых синтаксических конструкций, в отличие от
словесной формы записи. Эти конструкции состоят из математических
формул и выражений в сочетании со словесными пояснениями. Правила
записи алгоритма вводятся самим разработчиком, однако такая запись уже
более похожа на язык программирования и называется псевдокодом.
Например, алгоритм выше представленной задачи в такой форме
можно записать так:
1-й шаг. Задать число a.
2-й шаг. Задать число b.
3-й шаг. Задать число c.
4-й шаг. S=a+b+c.
5-й шаг. S=S/3.
6-й шаг. Вывести S.
Блок-схемы алгоритмов — это графическое описание алгоритмов как
последовательности действий. Описание алгоритма с помощью блок-схем
осуществляется рисованием последовательности функциональных блоков,
каждый из которых подразумевает выполнение определенного действия
алгоритма. Порядок выполнения действий указывается стрелками. Написание
алгоритмов с помощью блок-схем регламентируется ГОСТом.
В схеме алгоритма каждому типу действий соответствует
геометрическая фигура. Фигуры соединяются линиями переходов,
определяющими очередность выполнения действий. В блок-схемах всегда
есть начало и конец, обозначаемые эллипсами, между ними —
последовательность шагов алгоритма, соединенных стрелками. Шаги бывают
безусловными (изображаются прямоугольниками, параллелограммами) и
условными (изображаются ромбами). Из ромба всегда выходят две стрелки —
одна означает дальнейший путь, в случае выполнения условия (обозначается
обычно словом «да» или «+»), другая — невыполнение (слово «нет» или «–«).
Ввод с клавиатуры или вывод на экран значения выражения изображается
параллелограммом. Команда, выполняющая обработку действий (обычно
команда присваивания), изображается в прямоугольнике.
Графический способ представления алгоритмов является более
компактным и наглядным по сравнению со словесным. Однако сохраняет и
некоторые недостатки. С помощью блок-схем можно записывать в том числе
и неформальные (например, бытовые) алгоритмы, содержание
функциональных блоков при этом остается относительно произвольным.
Отсутствие явных ограничений на правила перехода в блок-схемах приводит
к тому, что в них не всегда можно явно выделить базовые алгоритмические
конструкции, т.е. алгоритм, записанный таким образом, может не
соответствовать требованиям структурного программирования. Наконец,
обозримыми являются блок-схемы только для небольших алгоритмов. При
составлении блок-схем надо внимательно следить за структурностью
алгоритма, т.е. блок-схема произвольного алгоритма должна быть
композицией схем основных алгоритмических конструкций, в противном
случае программирование подобного алгоритма будет затруднено.
Программная форма
При записи алгоритма как в словесной форме, так и в виде блок-схем
допускается определенный произвол при изображении команд. Вместе с тем
такая запись точна настолько, что позволяет человеку понять суть дела и
исполнить алгоритм. Однако на практике в качестве исполнителей алгоритмов
используются специальные автоматы, в частности, компьютеры. Поэтому
алгоритм, предназначенный для того или иного исполнителя, должен быть
записан на «понятном» ему языке. И здесь на первый план выдвигается
необходимость точной записи команд, не оставляющей места для
произвольного толкования их исполнителем. Следовательно, язык для записи
алгоритмов должен быть формализован. Такой язык для компьютера-
исполнителя принято называть языком программирования, а запись алгоритма
на этом языке — программой для компьютера
