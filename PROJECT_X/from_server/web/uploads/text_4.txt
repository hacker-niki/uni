Регулярные выражения
Макейчик Е.Г. 29
Пакет состоит всего из трех классов: Matcher, Pattern,
PatternSyntaxException
• Pattern – скомпилированное представление
регулярного выражения. Для компиляции нужно
вызвать статический метод compile()
• Matcher – движок, который производит операцию
сравнения (match)
• PatternSyntaxException – указывает на синтаксическую
ошибку в выражении
Регулярные выражения
Макейчик Е.Г. 30
Основой синтаксиса RegEx
является тот факт, что
некоторые символы,
встречающиеся в строке,
рассматриваются не как
обычные символы, а как
имеющие специальное
значение
Каждый метасимвол
имеет свою собственную
роль
RegEx Значение
^ Начало проверяемой строки
$ Конец проверяемой строки
. Сокращенная форма записи для символьного класса, совпадающего
с любым символом
| Подвыражения, объединенные этим способом, называются
альтернативами (alternatives)
? Означает, что предшествующий ему символ является
необязательным
+ Обозначает один или несколько экземпляров непосредственно
предшествующего элемента
* Любое количество экземпляров элемента (в том числе и нулевое)
\\d Цифровой символ
\\D Не цифровой символ
\\s Пробельный символ
\\S Не пробельный символ
\\w Буквенный (латиница), цифровой символ или знак подчеркивания
\\W Любой символ, кроме буквенного, цифрового символа или знака
подчеркивания
[abc] Диапазон символов или цифр
Регулярные выражения
Макейчик Е.Г. 31
Рекомендации при
проектировании классов
Макейчик Е.Г. 32
При создании класса следует придерживаться некоторых
правил:
1. Принцип единственной ответственности. Каждый класс
должен иметь простое назначение. Решать в идеале
единственную задачу
2. Классу следует давать такое имя, чтобы его
пользователю была понятна роль класса в приложении
Рекомендации при
проектировании классов
Макейчик Е.Г. 33
3. Если класс отвечает за хранение информации, то
функциональность работы с этой информацией должна
быть базовой. Манипулированием информацией через
объект должны заниматься другие классы, которых
может оказаться достаточно много
4. Класс должен быть разработан так, чтобы внесение в
него изменений было относительно простой задачей
5. Код конструктора должен заниматься только
инициализацией объекта
Рекомендации при
проектировании классов
Макейчик Е.Г. 34
6. Следует избегать вызовов из конструктора других
методов, за исключением final, static, private. Иначе
такой метод может быть переопределен в подкласс и
исказить процесс инициализации объекта
7. Использовать инкапсуляцию нестатических и
неконстантных полей
Рекомендации при
проектировании классов
Макейчик Е.Г. 35
8. Если разрабатываемый класс кажется сложным, следует
разбить его на несколько простых
9. По возможности избегать слишком длинных методов.
От 25‒30-и строк — длинный метод. Следует, если это
возможно, разбить метод на несколько, или даже
создать для этой цели новый класс
10.Если метод используется только другими методами
этого класса, следует объявлять его как private
Рекомендации при
проектировании классов
Макейчик Е.Г. 36
11.Определить и распределить по разным классам
функциональности, которые могут изменяться в
процессе разработки, от тех, которые будут
постоянными
12.Хороший дизайн кода отличается высоким уровнем
декомпозиции
13.Если в разных участках класса или нескольких классов
востребован один и тот же фрагмент кода, следует
выделить его в отдельный метод
Рекомендации при
проектировании классов
Макейчик Е.Г. 37
14.Избегать длинного списка аргументов. Приближаясь к
числу семь, список аргументов становится не
воспринимаемым при чтении. Возможно, следует
объединить группы аргументов в новый тип данных
15.Не использовать «магические числа», «магические
строки». Логичнее вынести их в final static атрибуты или
за пределы кода, например, в файл
Magic numbers
Макейчик Е.Г. 38
магические числа (magic
numbers) – числа,
происхождение которых
невозможно понять без
глубокого знания
происходящего внутри
участка кода
