import random

def is_prime(n, k=5):
    """
    Проверяет, является ли число простым, используя тест Миллера-Рабина.
    
    Args:
        n (int): Число для проверки на простоту
        k (int): Количество раундов теста (увеличивает точность)
    
    Returns:
        bool: True если число вероятно простое, False если составное
    
    Тест Миллера-Рабина - вероятностный тест, который определяет,
    является ли число составным или вероятно простым.
    """
    # Четные числа, кроме 2, не являются простыми
    if n % 2 == 0:
        return False
    
    # Представляем n-1 в виде d * 2^r
    d = n - 1
    r = 0
    while d % 2 == 0:
        d //= 2
        r += 1
    
    # Проводим k раундов теста
    for _ in range(k):
        a = random.randint(2, n - 2)
        x = pow(a, d, n)
        
        if x == 1 or x == n - 1:
            continue
        
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    
    return True

def generate_q():
    """
    Генерирует 256-битное простое число q.
    
    Returns:
        int: Простое число q
    
    Процесс генерации:
    1. Генерируем случайное 256-битное число
    2. Убеждаемся, что оно находится в диапазоне [2^254, 2^256)
    3. Проверяем на простоту с помощью теста Миллера-Рабина
    """
    while True:
        # Генерируем случайное 256-битное число
        q = random.getrandbits(256)
        # Обеспечиваем, чтобы число было в нужном диапазоне
        q = q % (2 ** 256) + 2 ** 254
        if is_prime(q):
            return q

def generate_p(q):
    """
    Генерирует простое число p на основе q.
    
    Args:
        q (int): Простое число
    
    Returns:
        int: Простое число p = 2q + 1
    
    В криптографических системах часто используют безопасные простые числа,
    которые имеют вид p = 2q + 1, где q также простое число.
    """
    return 2 * q + 1

def generate_g(p, q):
    """
    Находит генератор мультипликативной группы по модулю p.
    
    Args:
        p (int): Простое число
        q (int): Простое число, где p = 2q + 1
    
    Returns:
        int: Генератор g мультипликативной группы
    
    Генератор - это элемент, степени которого порождают всю группу.
    Для безопасного простого числа p = 2q + 1, порядок группы равен 2q.
    """
    for g in range(1, p):
        if pow(g, q, p) == 1:
            return g
    return -1
