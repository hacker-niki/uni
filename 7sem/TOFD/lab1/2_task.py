import sys
from solana.rpc.api import Client
from solders.pubkey import Pubkey
from solana.constants import LAMPORTS_PER_SOL

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Devnet, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ LOCAL_URL –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ DEVNET_URL
RPC_URL = "http://127.0.0.1:8899"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
# RPC_URL = "https://api.devnet.solana.com" # Solana Devnet

def get_address_from_args():
    if len(sys.argv) < 2:
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.")
        sys.exit(1)
    
    try:
        return Pubkey.from_string(sys.argv[1])
    except ValueError:
        print(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å: {sys.argv[1]}")
        sys.exit(1)

def airdrop(client, public_key):
    try:
        print(f"ü™Ç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 1 SOL –¥–ª—è {public_key}...")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∏—Ä–¥—Ä–æ–ø
        resp = client.request_airdrop(public_key, 1 * LAMPORTS_PER_SOL)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        signature = resp.value
        
        # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        client.confirm_transaction(signature)
        
        print(f"‚úÖ –ê–∏—Ä–¥—Ä–æ–ø —É—Å–ø–µ—à–µ–Ω! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {signature}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∏—Ä–¥—Ä–æ–ø–µ: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
if __name__ == "__main__":
    address_to_airdrop = get_address_from_args()
    solana_client = Client(RPC_URL)
    airdrop(solana_client, address_to_airdrop)
