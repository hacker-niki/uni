#include <iostream>
#include <queue>
#include <fstream>


using namespace std;

int n, m;

vector<pair<pair<char, char>, int>> q;
vector<vector<char>> lab;
vector<vector<bool>> used;


int bfs(char x, char y)
{
    char v, i, j;
    pair<pair<char, char>, int> u;
    q.push_back(make_pair(make_pair(x, y),0));
    bool kostil;

    while (!q.empty())
    {
        u = q.front();
        i = u.first.first;
        j = u.first.second;
        used[i][j] = true;
        q.erase(q.begin());

        //вправа
        if (j <= m && lab[i][j + 1] != 1 )
        {

            while (lab[i][j] == 0 && j < m + 1)
            {
                if (lab[i][j + 1] == 2)
                {
                    //cout << i << ';' << j << '\n';
                    return u.second + 1;

                }
                else if (lab[i][j + 1] == 1)
                {
                    if (!used[i][j])
                    {
                        kostil = true;
                        for (char k = 0; k < q.size(); k++)
                        {
                            if (q[k].first.first == i && q[k].first.second == j)
                            {
                                kostil = false;
                                break;
                            }
                        }
                        if(kostil)
                            q.push_back(make_pair(make_pair(i, j), u.second + 1));
                    }
                    //cout << "add " << i << ':' << j << '\n';
                    break;
                }
                else
                {
                    j++;
                }
            }
        }

        i = u.first.first;
        j = u.first.second;
        //влева
        if (j - 1 >= 0 && lab[i][j - 1] != 1 )
        {
            while (lab[i][j] == 0 && j > 0)
            {
                if (lab[i][j - 1] == 2)
                {
                    //cout << i << ';' << j << '\n';
                    return u.second + 1;

                }
                else if (lab[i][j - 1] == 1)
                {
                    if (!used[i][j])
                    {
                        kostil = true;
                        for (char k = 0; k < q.size(); k++)
                        {
                            if (q[k].first.first == i && q[k].first.second == j)
                            {
                                kostil = false;
                                break;
                            }
                        }
                        if (kostil)
                        q.push_back(make_pair(make_pair(i, j), u.second + 1));
                    }
                    //cout << "add " << i << ':' << j << '\n';
                    break;
                }
                else
                {
                    j--;
                }
            }
        }
        i = u.first.first;
        j = u.first.second;
        //вверх
        if (i - 1 >= 0 && lab[i - 1][j] != 1 )
        {
            while (lab[i][j] == 0 && i > 0)
            {
                if (lab[i - 1][j] == 2)
                {
                    //cout << i << ';' << j << '\n';
                    return u.second + 1;

                }
                else if (lab[i - 1][j] == 1)
                {
                    if (!used[i][j])
                    {
                        kostil = true;
                        for (char k = 0; k < q.size(); k++)
                        {
                            if (q[k].first.first == i && q[k].first.second == j)
                            {
                                kostil = false;
                                break;
                            }
                        }
                        if (kostil)
                         q.push_back(make_pair(make_pair(i, j), u.second + 1));
                    }
                    //cout << "add " << i << ':' << j << '\n';
                    break;
                }
                else
                {
                    i--;
                }
            }
        }

        i = u.first.first;
        j = u.first.second;
        //вниз
        if (i <= n && lab[i + 1][j] != 1)
        {
            while (lab[i][j] == 0 && i < n + 1)
            {
                if (lab[i + 1][j] == 2)
                {
                    //cout << i << ';' << j << '\n';
                    return u.second + 1;
                }
                else if (lab[i + 1][j] == 1)
                {
                    if (!used[i][j])
                    {
                        kostil = true;
                        for (char k = 0; k < q.size(); k++)
                        {
                            if (q[k].first.first == i && q[k].first.second == j)
                            {
                                kostil = false;
                                break;
                            }
                        }
                        if (kostil)
                            q.push_back(make_pair(make_pair(i, j), u.second + 1));
                    }
                    //cout << "add " << i << ':' << j << '\n';
                    break;
                }
                else
                {
                    i++;
                }
            }
        }

    }
}


int main() {
   // ifstream infile("D:\\253505\\4sem\\aisd\\Yandex\\test2.txt");
    cin >> n >> m;

    vector<char> as;
    vector<bool> as2;
    as.assign(m + 2, 0);
    as2.assign(m + 2, false);
    lab.assign(n + 2, as);
    used.assign(n + 2, as2);
  

    for (char i = 0; i < n + 2; i++)
    {
        lab[i][0] = 1;
        lab[i][m + 1] = 1;
    }
    for (char i = 1; i < m + 1; i++)
    {
        lab[0][i] = 1;
        lab[n + 1][i] = 1;
    }

    int b;
    for (char i = 1; i <= n; i++)
    {
        for (char j = 1; j <= m; j++)
        {
            cin >> b;
            if (b != 0)
                lab[i][j] = b;
        }
    }

    /*4 5
        0 0 0 1 2
        0 0 0 0 0
        0 0 0 0 0
        0 0 0 0 0*/
      /*  for (char i = 0; i < n + 2; i++)
        {
            for (char j = 0; j < m + 2; j++)
            {
                if(lab[i][j] == 1)
                  cout << '#' << ' ';
                else if(lab[i][j] == 2)
                    cout << '@' << ' ';
                else
                    cout << ' ' << ' ';

            }
            cout << '\n';
        }*/
    cout << bfs(1, 1);

    return 0;
}
