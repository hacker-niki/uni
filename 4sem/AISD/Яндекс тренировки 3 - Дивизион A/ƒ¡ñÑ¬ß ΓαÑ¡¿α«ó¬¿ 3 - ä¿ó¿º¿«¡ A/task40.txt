#include <iostream>
#include <vector>
#include <queue>

using namespace std;



const int MaXn = 2 * 1e3 + 213;

const long long OO = 1 * 1e18 + 1118;
const int oo = 1 * 1e9 + 119;

vector<pair<pair<int,int>,int>> g[MaXn][MaXn];

const int Module = 1 * 1e9 + 7;


int main() {

    int n, k;
    cin >> n >> k;

    for (int i = 0; i < k; i++) {

        int m;
        cin >> m;

        for (int j = 0; j < m; j++) {

            int a, b;
            cin >> a >> b;

            a = a - 1, b = b - 1;

            g[i][a].push_back({ {i, b}, 0 }), g[i][b].push_back({ {i, a}, 0 });
            g[i][a].push_back({ {k, a}, 1 }), g[k][a].push_back({ {i, a}, 0 });
            g[i][b].push_back({ {k, b}, 1 }), g[k][b].push_back({ {i, b}, 0 });
        }
    }

    vector <vector <int> > d(k + 1, vector <int>(n, oo));
    queue <pair <int, int> > q;

    for (int i = 0; i < k; i++) {

        d[i][0] = 1;
        q.push({ i, 0 });
    }

    while (!q.empty()) {

        int m = q.front().first, a = q.front().second;
        for (auto b : g[m][a]) {

            if (d[b.first.first][b.first.second] > d[m][a] + b.second) {

                d[b.first.first][b.first.second] = d[m][a] + b.second;
                q.push(b.first);
            }
        }

        q.pop();
    }

    int c = oo;

    for (int i = 0; i < k; i++) {
        c = min(c, d[i][n - 1]);
    }

    cout << (c < oo ? c : -1) << "\n";

    return 0;
}
