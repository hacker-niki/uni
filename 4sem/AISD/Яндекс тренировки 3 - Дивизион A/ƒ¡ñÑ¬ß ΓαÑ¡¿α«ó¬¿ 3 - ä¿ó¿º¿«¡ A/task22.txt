#include <iostream>
#include <stack>

long long* dp;
long long* prev;
long long* mas;

long long maxdp = 0, maxdpind = -1;

void nvp(long long n)
{
    long long max = 1;
    long long currprev = -1;
    for (int i = 1; i < n; i++)
    {
        if (mas[i] < mas[n] && dp[i] >= max)
        {
            max = dp[i] + 1;
            currprev = i;
        }
    }
    if (maxdp < max)
    {
        maxdp = max;
        maxdpind = n;
    }
    dp[n] = max;
    prev[n] = currprev;
}

int main()
{
    long long n; 
    std::cin >> n;
    mas = new long long[n + 1];
    dp = new long long[n + 1];
    prev = new long long[n + 1];
    for (int i = 1; i < n + 1; i++)
    {
        std::cin >> mas[i];
    }

    if (n == 1)
    {
        std::cout << mas[1];
        return 0;
    }
    if (n == 2)
    {
        if (mas[1] < mas[2])
        {
            std::cout << mas[1] << ' ' << mas[2];
        }
        else
        {
            std::cout << mas[1];
        }
        return 0;
    }

    dp[1] = 1;
    prev[1] = -1;
    if (n > 1 && mas[1] > mas[2])
    {
        dp[2] = 1;
        prev[2] = -1;
    }
    else
    {
        dp[2] = 2;
        prev[2] = 1;
    }

    for (int i = 3; i < n + 1; i++)
    {
        nvp(i);
    }

    /*for (int i = 1; i < n + 1; i++)
    {
        std::cout << dp[i] << ' ';
    }
    std::cout << '\n';
    for (int i = 1; i < n + 1; i++)
    {
        std::cout << prev[i] << ' ';
    }
    std::cout << '\n';*/
    //std::cout << dp[n];
    std::stack<long long> st;
    //st.push(mas[])
    do
    {
        st.push(mas[maxdpind]);
        maxdpind = prev[maxdpind];
    } while (maxdpind != -1);
    long long size = st.size();
    for (int i = 0; i < size; i++)
    {
        std::cout << st.top() << ' ';
        st.pop();
    }
    return 0;
}