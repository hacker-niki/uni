import sys
sys.setrecursionlimit(100001)
nums = input().strip().split(' ')
n,m = int(nums[0]), int(nums[1])
b=0

used = [[False]*m for l in range(n)]
g = [[0]*m for l in range(n)]
ans = 0



for i in range(n):
    s = input().strip().split(' ')
    for j in range(len(s)):
        g[i][j] = int(s[j])

def pizdec_a_ne_functia(i,j):
    global b
    used[i][j] = True
    if i-1>=0 and g[i-1][j] >=g[i][j] and not used[i-1][j]:
        pizdec_a_ne_functia(i - 1,j)

    if j-1>=0 and g[i][j-1] >=g[i][j] and not used[i][j-1]:
        pizdec_a_ne_functia(i,j-1)

    if i+1<n and g[i+1][j] >=g[i][j] and not used[i+1][j]:
        pizdec_a_ne_functia(i+1,j)

    if j+1<m and g[i][j+1] >=g[i][j] and not used[i][j+1]:
        pizdec_a_ne_functia(i,j+1)
    b-=1
    g[i][j]=1e20


def argmin():
    global g
    min_val = 1e20
    for i in range(n):
        for j in range(m):
            
            cur = g[i][j]
            if cur < min_val:
                min_val = g[i][j]
    
    for i in range(n):
        for j in range(m):
            if g[i][j] == min_val:
                return (i,j)


    
def tak_blyat():
   global g, ans,b
   b = n*m
   while b:
    min_coords = argmin()
    pizdec_a_ne_functia(min_coords[0],min_coords[1])
    ans += 1

if __name__ == "__main__":
    
    tak_blyat()
    
    print(ans)